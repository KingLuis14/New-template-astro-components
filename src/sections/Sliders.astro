---
import SectionPage from "@/components/SectionPage.astro";
import Wrapper from "@/components/Wrapper/Wrapper.astro";
import { Icon } from "astro-icon/components";

const images = [
  "https://static.nationalgeographic.es/files/styles/image_3200/public/75552.ngsversion.1422285553360.jpg?w=1900&h=1267",
  "https://s1.elespanol.com/2017/05/19/cocinillas/cocinillas_217240812_116336849_1706x960.jpg",
  "https://img.freepik.com/foto-gratis/vista-animal-gracioso_23-2151098354.jpg?size=626&ext=jpg&ga=GA1.1.2008272138.1724544000&semt=ais_hybrid",
  "https://hips.hearstapps.com/hmg-prod/images/grumpy-cat-gatos-internet-meme-1582125875.jpg",
  "https://yt3.googleusercontent.com/bULnA4xs69WDJt5mdQCzeLnSjclI1CviNIxj5HLpN1V6d72GP9BYXy_GKxmyZBD-lW9FvUU=s900-c-k-c0x00ffffff-no-rj",
];
---

<SectionPage>
  <Wrapper>
    <div class="slider">
      <button class="slider__prev">
        <Icon name="ArrowIcon" size={25} />
      </button>
      <ul class="slider__list">
        {
          images.map((img, index) => (
            <li
              class:list={[`slider__item`, { active: index === 0 }]}
              data-positionValue={`-${index * 100}%`}
              data-slide={index}
            >
              <img src={img} alt={`imagen${index}`} />
            </li>
          ))
        }
      </ul>
      <nav class="slider__nav">
        {
          images.map((img, index) => (
            <button class:list={[`slider__dot`, { active: index === 0 }]} />
          ))
        }
      </nav>
      <button class="slider__next">
        <Icon name="ArrowIcon" size={25} />
      </button>
    </div>
  </Wrapper>
</SectionPage>

<style lang="scss">
  .slider {
    position: relative;
    overflow-x: hidden;
    &__list {
      display: flex;
      height: 50svh;

      --Move: 0;
      --transition: none;

      transition: var(--transition) 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      transform: translateX(var(--Move));
      cursor: grab;
      // overflow-x: scroll;
    }

    &__item {
      width: 100%;
      flex-shrink: 0;

      &.active img {
        filter: invert(70%);
      }

      > img {
        height: 100%;
      }
    }

    &__nav {
      display: flex;
      padding: 0.5rem 1.5rem;
      gap: 0.8rem;
      position: absolute;
      top: 90%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.491);
    }

    &__dot {
      width: 15px;
      aspect-ratio: 1;
      outline: 2px solid white;
      border-radius: 50%;

      &.active {
        background-color: white;
      }
    }

    &__next {
      position: absolute;
      top: 50%;
      right: 1rem;
      transform: translateY(-50%);
      z-index: 20;
      border-radius: 50%;
      color: white;
      width: 40px;
      aspect-ratio: 1;
      display: grid;
      place-items: center;
      // padding: 0.3em;

      background-color: rgba(0, 0, 0, 0.566);

      > * {
        transform: rotate(90deg);
        pointer-events: none;
      }
    }

    &__prev {
      position: absolute;
      top: 50%;
      left: 1rem;
      transform: translateY(-50%);
      z-index: 20;
      border-radius: 50%;
      color: white;
      width: 40px;
      aspect-ratio: 1;
      display: grid;
      place-items: center;
      background-color: rgba(0, 0, 0, 0.566);

      > * {
        transform: rotate(-90deg);
        pointer-events: none;
      }
    }
  }
</style>

<script>
  import { addCustomEventListener } from "@/utils/CustomEventListener";

  const $SLiderList = document.querySelector(".slider__list") as HTMLElement;
  const $SLiderNavDot = document.querySelector(".slider__nav") as HTMLElement;
  const $ArrayDots = Array.from($SLiderNavDot.children);
  const $SLiderItems = document.querySelectorAll(".slider__item");

  const itemObserver = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entri) => {
        if (entri.isIntersecting) {
          entri.target.classList.add("active");
          observer.unobserve(entri.target);
        } else {
          entri.target.classList.remove("active");
        }
      });
    },
    {
      root: document.querySelector(".slider"),
      threshold: 0.9,
    }
  );

  const observeSlides = () => {
    $SLiderItems.forEach((item) => itemObserver.observe(item));
  };

  observeSlides(); // Iniciar observaci贸n

  addCustomEventListener("click", ".slider__next", () => {
    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;
    const $NextSlide = $SlideActive?.nextElementSibling as HTMLElement;

    if (!$NextSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($NextSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");

    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  addCustomEventListener("click", ".slider__prev", () => {
    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;
    const $NextSlide = $SlideActive?.previousElementSibling as HTMLElement;

    if (!$NextSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($NextSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");
    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  const setActiveDot = (index: string) => {
    $ArrayDots.forEach((dot) => dot.classList.remove("active"));

    const $indexDot = parseInt(index);
    $ArrayDots[$indexDot].classList.add("active");
  };

  const getSlidePostion = (item: HTMLElement) => {
    //
    return {
      dataPosition: item.getAttribute("data-positionValue"),
      dataSlide: item.getAttribute("data-slide"),
    };
  };

  const setSlideMove = (value: string) => {
    return $SLiderList.style.setProperty("--Move", value);
  };

  const setSlideTransition = (value: string) => {
    return $SLiderList.style.setProperty("--transition", value);
  };

  ////

  let isDragging = false;
  let startX = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;

  $SLiderList.addEventListener("mousedown", (e) => {
    isDragging = true;
    startX = e.clientX;
    $SLiderList.style.cursor = "grabbing";
    e.preventDefault();
  });

  window.addEventListener("mousemove", (e) => {
    if (!isDragging) return;

    const currentX = e.clientX;
    const distance = currentX - startX;

    // Mover el slider basado en el desplazamiento del mouse
    currentTranslate = prevTranslate + distance;

    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;

    let $TargetSlide;

    if (distance > 0) {
      // Desplazamiento hacia la derecha
      $TargetSlide = $SlideActive?.previousElementSibling as HTMLElement; // Ir hacia la izquierda
    } else {
      // Desplazamiento hacia la izquierda
      $TargetSlide = $SlideActive?.nextElementSibling as HTMLElement; // Ir hacia la derecha
    }

    if (!$TargetSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($TargetSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");

    console.log({
      currentTranslate,
      direction: distance > 0 ? "right" : "left",
    });

    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  window.addEventListener("mouseup", () => {
    if (!isDragging) return;

    isDragging = false;
    $SLiderList.style.cursor = "grab";

    prevTranslate = currentTranslate;
  });

  // Evento touchstart (equivalente a mousedown)
  $SLiderList.addEventListener("touchstart", (e) => {
    isDragging = true;
    startX = e.touches[0].clientX; // Obtener la posici贸n inicial del toque
    $SLiderList.style.cursor = "grabbing";
    e.preventDefault();
  });

  // Evento touchmove (equivalente a mousemove)
  window.addEventListener("touchmove", (e) => {
    if (!isDragging) return;

    const currentX = e.touches[0].clientX; // Obtener la posici贸n actual del toque
    const distance = currentX - startX;

    // L贸gica de desplazamiento adaptada
    currentTranslate = prevTranslate + distance;

    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;

    let $TargetSlide;

    if (distance > 0) {
      // Desplazamiento hacia la derecha
      $TargetSlide = $SlideActive?.previousElementSibling as HTMLElement; // Ir hacia la izquierda
    } else {
      // Desplazamiento hacia la izquierda
      $TargetSlide = $SlideActive?.nextElementSibling as HTMLElement; // Ir hacia la derecha
    }

    if (!$TargetSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($TargetSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");

    console.log({
      currentTranslate,
      direction: distance > 0 ? "right" : "left",
    });

    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  // Evento touchend (equivalente a mouseup)
  window.addEventListener("touchend", () => {
    if (!isDragging) return;

    isDragging = false;
    $SLiderList.style.cursor = "grab";

    prevTranslate = currentTranslate;
  });
</script>
