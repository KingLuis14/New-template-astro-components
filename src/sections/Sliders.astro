---
import SectionPage from '@/components/SectionPage.astro';
import Wrapper from '@/components/Wrapper/Wrapper.astro';
import { Icon } from 'astro-icon/components';

const images = [
  'https://static.nationalgeographic.es/files/styles/image_3200/public/75552.ngsversion.1422285553360.jpg?w=1900&h=1267',
  'https://s1.elespanol.com/2017/05/19/cocinillas/cocinillas_217240812_116336849_1706x960.jpg',
  'https://img.freepik.com/foto-gratis/vista-animal-gracioso_23-2151098354.jpg?size=626&ext=jpg&ga=GA1.1.2008272138.1724544000&semt=ais_hybrid',
  'https://hips.hearstapps.com/hmg-prod/images/grumpy-cat-gatos-internet-meme-1582125875.jpg',
  'https://yt3.googleusercontent.com/bULnA4xs69WDJt5mdQCzeLnSjclI1CviNIxj5HLpN1V6d72GP9BYXy_GKxmyZBD-lW9FvUU=s900-c-k-c0x00ffffff-no-rj',
];

// images.push(images[0]);
// images.unshift(images[images.length - 2]);
---

<SectionPage>
  <Wrapper>
    <div class="slider">
      <button class="slider__prev">
        <Icon name="ArrowIcon" size={25} />
      </button>
      <ul class="slider__list">
        {
          images.map((img, index) => (
            <li
              class:list={[`slider__item`, { active: index === 0 }]}
              data-positionValue={`-${index * 100}%`}
              data-slide={index}
            >
              <img src={img} alt={`imagen${index}`} />
            </li>
          ))
        }
      </ul>
      <nav class="slider__nav">
        {
          images.map((img, index) => (
            <button data-slide={index} class:list={[`slider__dot`, { active: index === 0 }]} />
          ))
        }
      </nav>
      <button class="slider__next">
        <Icon name="ArrowIcon" size={25} />
      </button>
    </div>

    <h1 id="datos" style="color: white"></h1>
  </Wrapper>
</SectionPage>

<style lang="scss">
  .slider {
    position: relative;
    // overflow-x: hidden;
    &__list {
      display: flex;
      height: 50svh;

      --Move: auto;
      --transition: none;

      transition: var(--transition) 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      overflow-x: scroll;
      scroll-behavior: var(--Move);
      scroll-snap-type: x mandatory;

      scrollbar-width: 0;

      &::-webkit-scrollbar {
        height: 0px;
      }
    }

    &__item {
      width: 100%;
      flex-shrink: 0;
      scroll-snap-stop: always;
      scroll-snap-align: start;

      &.active img {
        filter: invert(70%);
      }

      > img {
        height: 100%;
      }
    }

    &__nav {
      display: flex;
      padding: 0.5rem 1.5rem;
      gap: 0.8rem;
      position: absolute;
      top: 90%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.491);
    }

    &__dot {
      width: 15px;
      aspect-ratio: 1;
      outline: 2px solid white;
      border-radius: 50%;

      &.active {
        background-color: white;
      }
    }

    &__next {
      position: absolute;
      top: 50%;
      right: 1rem;
      transform: translateY(-50%);
      z-index: 20;
      border-radius: 50%;
      color: white;
      width: 40px;
      aspect-ratio: 1;
      display: grid;
      place-items: center;
      // padding: 0.3em;

      background-color: rgba(0, 0, 0, 0.566);

      > * {
        transform: rotate(90deg);
        pointer-events: none;
      }
    }

    &__prev {
      position: absolute;
      top: 50%;
      left: 1rem;
      transform: translateY(-50%);
      z-index: 20;
      border-radius: 50%;
      color: white;
      width: 40px;
      aspect-ratio: 1;
      display: grid;
      place-items: center;
      background-color: rgba(0, 0, 0, 0.566);

      > * {
        transform: rotate(-90deg);
        pointer-events: none;
      }
    }
  }
</style>

<script>
  import { addCustomEventListener, obtenerHermanos } from '@/utils/CustomEventListener';

  type Direction = 'LEFT' | 'RIGTH';
  const $Slider = document.querySelector('.slider') as HTMLElement;
  const $SLiderList = document.querySelector('.slider__list') as HTMLElement;
  const $ArrayItem = Array.from($SLiderList.children) as HTMLElement[];
  const $Datos = document.querySelector('#datos') as HTMLElement;
  const $sliderNavDot = $Slider.querySelector('.slider__nav') as HTMLElement;
  const $arrayDots = $sliderNavDot ? (Array.from($sliderNavDot.children) as HTMLElement[]) : [];

  const itemObserver = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entri) => {
        if (entri.isIntersecting) {
          $SLiderList.style.setProperty('--Move', 'auto');
          const $TargetElement = entri.target as HTMLElement;
          const atributeDataSlide = $TargetElement.getAttribute('data-slide');

          entri.target.classList.add('active');
          setActiveDot(atributeDataSlide);

          if ($TargetElement.hasAttribute('data-clone')) {
            const $ArrayItem = Array.from($SLiderList.children) as HTMLElement[];

            const atributeDataSlide = $TargetElement.getAttribute('data-slide');

            const $original = $ArrayItem.find(
              (item) => item.getAttribute('data-slide') === atributeDataSlide && !item.hasAttribute('data-clone')
            );

            if ($original) {
              const originalIndex = $ArrayItem.indexOf($original);

              const elementsBeforeOriginal = $ArrayItem.slice(0, originalIndex + 1);

              // console.log(elementsBeforeOriginal);

              const totalWidth = elementsBeforeOriginal.reduce((sum, element, index) => {
                return index < elementsBeforeOriginal.length - 1 ? sum + element.offsetWidth : sum;
              }, 0);

              $SLiderList.scrollLeft = totalWidth;

              // $Datos.innerHTML = `<h1>Es un clone, mover el scroll a ${totalWidth}</h1>`;
            }
          }
        } else {
          entri.target.classList.remove('active');
        }

        observer.unobserve(entri.target);
      });
    },
    {
      root: document.querySelector('.slider__list'),
      threshold: 0.8,
    }
  );

  const observeSlides = () => {
    const $ArrayItem = Array.from($SLiderList.children) as HTMLElement[];
    $ArrayItem.forEach((item) => itemObserver.observe(item));
  };

  const clonarItem = () => {
    const firstClone = $ArrayItem[0].cloneNode(true) as HTMLElement;
    const lastClone = $ArrayItem[$ArrayItem.length - 1].cloneNode(true) as HTMLElement;

    firstClone.setAttribute('data-clone', 'true');
    lastClone.setAttribute('data-clone', 'true');

    $SLiderList.prepend(lastClone);
    $SLiderList.scrollLeft = $SLiderList.offsetWidth;

    $SLiderList.append(firstClone);
  };

  window.onload = clonarItem;

  const setActiveDot = (index: string) => {
    if ($arrayDots.length === 0) return;

    $arrayDots.forEach((dot) => dot.classList.remove('active'));

    const $indexDot = parseInt(index, 10);
    if ($indexDot >= 0 && $indexDot < $arrayDots.length) {
      $arrayDots[$indexDot].classList.add('active');
    }
  };

  const getSlideWithDot = (dataSlide: string) => {
    if (dataSlide) {
      const $ArrayItem = Array.from($SLiderList.children) as HTMLElement[];

      const sliderActive = $ArrayItem.find(
        (itemSlider) => itemSlider.getAttribute('data-slide') === dataSlide && !itemSlider.hasAttribute('data-clone')
      );

      if (sliderActive) {
        return {
          element: sliderActive,
          distance: sliderActive.offsetLeft,
        };
      }
    }

    // Si no se encuentra el elemento o si `dataSlide` no estÃ¡ definido, retorna `null`
    return null;
  };

  $SLiderList.addEventListener('scrollend', () => {
    observeSlides();
  });

  addCustomEventListener('click', '.slider__next', () => {
    $SLiderList.style.setProperty('--Move', 'smooth');
    moveSLideActive('RIGTH', 1);
  });
  addCustomEventListener('click', '.slider__prev', () => {
    $SLiderList.style.setProperty('--Move', 'smooth');
    moveSLideActive('LEFT', 1);
  });

  addCustomEventListener('click', '.slider__dot', (e) => {
    const target = e.target as HTMLElement | null;
    $SLiderList.style.setProperty('--Move', 'smooth');

    const atributeDataSlide = target.getAttribute('data-slide');
    // console.log(atributeDataSlide);

    const { element, distance } = getSlideWithDot(atributeDataSlide);

    if (element) {
      setSlideMoveScroll(distance);
      // console.log(distance);
    }
  });

  const moveSLideActive = (direction: Direction, steps: number = 1) => {
    const $SlideActive = $SLiderList.querySelector('.slider__item.active') as HTMLElement;

    const { ultimoHermano } = obtenerHermanos($SlideActive, direction, steps);
    if (!ultimoHermano) return;

    const { distance } = getSlidePostion(ultimoHermano);
    setSlideMoveScroll(distance);
  };

  const setSlideMoveScroll = (value: number) => {
    $SLiderList.scrollLeft = value;
  };

  const getSlidePostion = (item: HTMLElement) => {
    return {
      dataPosition: item.getAttribute('data-positionValue'),
      dataSlide: item.getAttribute('data-slide'),
      distance: item.offsetLeft,
    };
  };
</script>

<!-- <script>
  const $SLiderList = document.querySelector(".slider__list") as HTMLElement;
  const $Datos = document.querySelector("#datos") as HTMLElement;

  let scrollTimeout: number | null = null;

  $SLiderList.addEventListener("scrollend", () => {
    updateSort($SLiderList);
  });

  // $SLiderList.addEventListener("scroll", () => {
  //   if (scrollTimeout !== null) {
  //     clearTimeout(scrollTimeout);
  //   }
  //   scrollTimeout = window.setTimeout(() => {
  //     updateSort($SLiderList);
  //   }, 50); // Ajusta el tiempo si es necesario
  // });

  function updateSort(el: HTMLElement) {
    const scrollWidth = el.scrollWidth - el.scrollLeft;
    const scrollLeft = el.scrollLeft;
    const width = el.offsetWidth;
    const items = Array.from(el.children) as HTMLElement[];

    if (scrollLeft <= 0) {
      el.prepend(items[items.length - 1]);
      el.scrollLeft = scrollLeft + width;
    }

    if (scrollLeft + width >= scrollWidth) {
      el.append(items[0]);
      el.scrollLeft = scrollLeft - width;
    }

    $Datos.innerHTML = `
                <p>Scroll Width: ${scrollWidth}px</p>
                <p>Scroll Left: ${scrollLeft}px</p>
                <p>Width: ${width}px</p>
                <p>Item Count: ${items.length}</p>
                
            `;
  }

  window.addEventListener("load", () => {
    updateSort($SLiderList);
  });
</script> -->

<!-- <script>
  import { addCustomEventListener } from "@/utils/CustomEventListener";

  const $SLiderList = document.querySelector(".slider__list") as HTMLElement;
  const $SLiderNavDot = document.querySelector(".slider__nav") as HTMLElement;
  const $ArrayDots = Array.from($SLiderNavDot.children);
  const $SLiderItems = document.querySelectorAll(".slider__item");

  const itemObserver = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entri) => {
        if (entri.isIntersecting) {
          entri.target.classList.add("active");
          observer.unobserve(entri.target);
        } else {
          entri.target.classList.remove("active");
        }
      });
    },
    {
      root: document.querySelector(".slider"),
      threshold: 0.9,
    }
  );

  const observeSlides = () => {
    $SLiderItems.forEach((item) => itemObserver.observe(item));
  };

  observeSlides(); // Iniciar observaciÃ³n

  addCustomEventListener("click", ".slider__next", () => {
    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;
    const $NextSlide = $SlideActive?.nextElementSibling as HTMLElement;

    if (!$NextSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($NextSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");

    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  addCustomEventListener("click", ".slider__prev", () => {
    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;
    const $NextSlide = $SlideActive?.previousElementSibling as HTMLElement;

    if (!$NextSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($NextSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");
    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  const setActiveDot = (index: string) => {
    $ArrayDots.forEach((dot) => dot.classList.remove("active"));

    const $indexDot = parseInt(index);
    $ArrayDots[$indexDot].classList.add("active");
  };

  const getSlidePostion = (item: HTMLElement) => {
    //
    return {
      dataPosition: item.getAttribute("data-positionValue"),
      dataSlide: item.getAttribute("data-slide"),
    };
  };

  const setSlideMove = (value: string) => {
    return $SLiderList.style.setProperty("--Move", value);
  };

  const setSlideTransition = (value: string) => {
    return $SLiderList.style.setProperty("--transition", value);
  };

  ////

  let isDragging = false;
  let startX = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;

  $SLiderList.addEventListener("mousedown", (e) => {
    isDragging = true;
    startX = e.clientX;
    $SLiderList.style.cursor = "grabbing";
    e.preventDefault();
  });

  window.addEventListener("mousemove", (e) => {
    if (!isDragging) return;

    const currentX = e.clientX;
    const distance = currentX - startX;

    // Mover el slider basado en el desplazamiento del mouse
    currentTranslate = prevTranslate + distance;

    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;

    let $TargetSlide;

    if (distance > 0) {
      // Desplazamiento hacia la derecha
      $TargetSlide = $SlideActive?.previousElementSibling as HTMLElement; // Ir hacia la izquierda
    } else {
      // Desplazamiento hacia la izquierda
      $TargetSlide = $SlideActive?.nextElementSibling as HTMLElement; // Ir hacia la derecha
    }

    if (!$TargetSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($TargetSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");

    console.log({
      currentTranslate,
      direction: distance > 0 ? "right" : "left",
    });

    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  window.addEventListener("mouseup", () => {
    if (!isDragging) return;

    isDragging = false;
    $SLiderList.style.cursor = "grab";

    prevTranslate = currentTranslate;
  });

  // Evento touchstart (equivalente a mousedown)
  $SLiderList.addEventListener("touchstart", (e) => {
    isDragging = true;
    startX = e.touches[0].clientX; // Obtener la posiciÃ³n inicial del toque
    $SLiderList.style.cursor = "grabbing";
    e.preventDefault();
  });

  // Evento touchmove (equivalente a mousemove)
  window.addEventListener("touchmove", (e) => {
    if (!isDragging) return;

    const currentX = e.touches[0].clientX; // Obtener la posiciÃ³n actual del toque
    const distance = currentX - startX;

    // LÃ³gica de desplazamiento adaptada
    currentTranslate = prevTranslate + distance;

    const $SlideActive = document.querySelector(
      ".slider__item.active"
    ) as HTMLElement;

    let $TargetSlide;

    if (distance > 0) {
      // Desplazamiento hacia la derecha
      $TargetSlide = $SlideActive?.previousElementSibling as HTMLElement; // Ir hacia la izquierda
    } else {
      // Desplazamiento hacia la izquierda
      $TargetSlide = $SlideActive?.nextElementSibling as HTMLElement; // Ir hacia la derecha
    }

    if (!$TargetSlide) return;

    const { dataPosition, dataSlide } = getSlidePostion($TargetSlide);
    setSlideMove(dataPosition);
    setSlideTransition("transform");

    console.log({
      currentTranslate,
      direction: distance > 0 ? "right" : "left",
    });

    itemObserver.disconnect();

    $SLiderList?.addEventListener("transitionend", () => {
      setSlideTransition("none");
      observeSlides();
      setActiveDot(dataSlide);
    });
  });

  // Evento touchend (equivalente a mouseup)
  window.addEventListener("touchend", () => {
    if (!isDragging) return;

    isDragging = false;
    $SLiderList.style.cursor = "grab";

    prevTranslate = currentTranslate;
  });
</script> -->
