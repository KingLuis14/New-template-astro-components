---
import SectionPage from "@/components/SectionPage.astro";
import Wrapper from "@/components/Wrapper/Wrapper.astro";
import { Icon } from "astro-icon/components";

const images = [
  "https://static.nationalgeographic.es/files/styles/image_3200/public/75552.ngsversion.1422285553360.jpg?w=1900&h=1267",
  "https://s1.elespanol.com/2017/05/19/cocinillas/cocinillas_217240812_116336849_1706x960.jpg",
  "https://img.freepik.com/foto-gratis/vista-animal-gracioso_23-2151098354.jpg?size=626&ext=jpg&ga=GA1.1.2008272138.1724544000&semt=ais_hybrid",
  "https://hips.hearstapps.com/hmg-prod/images/grumpy-cat-gatos-internet-meme-1582125875.jpg",
  "https://i.pinimg.com/736x/8b/c1/03/8bc103afbea75b591370177c9b18e52d.jpg",
];
---

<SectionPage>
  <Wrapper>
    <div class="slider">
      <button class="slider__prev">
        <Icon name="ArrowIcon" size={25} />
      </button>
      <ul class="slider__list">
        {
          images.map((img, index) => (
            <li
              class:list={[`slider__item`, { active: index === 0 }]}
              data-positionValue={`-${index * 100}%`}
              data-slide={index}
            >
              <img src={img} alt={`imagen${index}`} />
            </li>
          ))
        }
      </ul>
      <nav class="slider__nav">
        {
          images.map((img, index) => (
            <button
              data-slide={index}
              class:list={[`slider__dot`, { active: index === 0 }]}
            />
          ))
        }
      </nav>
      <button class="slider__next">
        <Icon name="ArrowIcon" size={25} />
      </button>
    </div>
  </Wrapper>
</SectionPage>

<style lang="scss">
  .slider {
    position: relative;

    &__list {
      display: flex;
      height: 50svh;

      --Move: 0;
      --transition: none;

      transition: var(--transition) 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      transform: translateX(var(--Move));
      //   cursor: grab;
      overflow-x: scroll;
      scroll-behavior: smooth;
      scroll-snap-type: x mandatory;

      scrollbar-width: 0;

      &::-webkit-scrollbar {
        width: 0;
      }
    }

    &__item {
      width: 100%;
      flex-shrink: 0;
      scroll-snap-stop: always;
      scroll-snap-align: start;

      &.active img {
        filter: saturate(10);
      }

      > img {
        height: 100%;
      }
    }

    &__nav {
      display: flex;
      padding: 0.5rem 1.5rem;
      gap: 0.8rem;
      position: absolute;
      top: 90%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.491);
    }

    &__dot {
      width: 15px;
      aspect-ratio: 1;
      outline: 2px solid white;
      border-radius: 50%;

      &.active {
        background-color: white;
      }
    }

    &__next {
      position: absolute;
      top: 50%;
      right: 1rem;
      transform: translateY(-50%);
      z-index: 20;
      border-radius: 50%;
      color: white;
      width: 40px;
      aspect-ratio: 1;
      display: grid;
      place-items: center;
      // padding: 0.3em;

      background-color: rgba(0, 0, 0, 0.566);

      > * {
        transform: rotate(90deg);
        pointer-events: none;
      }
    }

    &__prev {
      position: absolute;
      top: 50%;
      left: 1rem;
      transform: translateY(-50%);
      z-index: 20;
      border-radius: 50%;
      color: white;
      width: 40px;
      aspect-ratio: 1;
      display: grid;
      place-items: center;
      background-color: rgba(0, 0, 0, 0.566);

      > * {
        transform: rotate(-90deg);
        pointer-events: none;
      }
    }
  }
</style>

<script>
  import {
    addCustomEventListener,
    obtenerHermanos,
  } from "@/utils/CustomEventListener";

  type Direction = "LEFT" | "RIGTH";

  class SliderScroll {
    // Parámetro que recibe la clase
    private slider: HTMLElement | null = null;

    // Variables privadas a inicializar
    private $sliderNavDot: HTMLElement | null = null;
    private $sliderList: HTMLElement | null = null;
    private $sliderItems: HTMLElement[] | null = null;
    private $arraySLiderItems: HTMLElement[] = [];
    private $arrayDots: HTMLElement[] = [];

    private itemObserver: IntersectionObserver;

    constructor(slider: string) {
      this.slider = document.querySelector(slider);
      this.initElements();
      this.eventsElements();
      this.insertectionOberver();
    }

    private initElements = () => {
      this.$sliderNavDot = this.slider.querySelector(
        ".slider__nav"
      ) as HTMLElement;

      this.$sliderList = this.slider.querySelector(
        ".slider__list"
      ) as HTMLElement;

      this.$sliderItems = Array.from(
        this.$sliderList.querySelectorAll<HTMLElement>(".slider__item")
      );

      this.$arrayDots = this.$sliderNavDot
        ? (Array.from(this.$sliderNavDot.children) as HTMLElement[])
        : [];

      this.$arraySLiderItems = this.$sliderList
        ? (Array.from(this.$sliderList.children) as HTMLElement[])
        : [];
    };

    private eventsElements = () => {
      addCustomEventListener("click", ".slider__prev", () => {
        this.moveSLideActive("LEFT", 1);
      });
      addCustomEventListener("click", ".slider__next", () => {
        this.moveSLideActive("RIGTH", 1);
      });

      addCustomEventListener("click", ".slider__dot", (e) => {
        const target = e.target as HTMLElement | null;

        const atributeDataSlide = target.getAttribute("data-slide");

        const { element, distance } = this.#getSlideWithDot(atributeDataSlide);

        if (element) {
          this.setSlideMoveScroll(distance);
        }
      });

      this.$sliderList.addEventListener("scrollend", () => {
        this.observeSlides();
      });
    };

    private insertectionOberver = () => {
      this.itemObserver = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entri) => {
            if (entri.isIntersecting) {
              entri.target.classList.add("active");
              const { dataSlide } = this.getSlidePostion(
                entri.target as HTMLElement
              );
              this.setActiveDot(dataSlide);
            } else {
              entri.target.classList.remove("active");
            }

            observer.unobserve(entri.target);
          });
        },
        {
          root: document.querySelector(".slider__list"),
          threshold: 0.8,
        }
      );
    };

    private observeSlides = () => {
      this.$sliderItems.forEach((item) => this.itemObserver.observe(item));
    };

    private moveSLideActive = (direction: Direction, steps: number = 1) => {
      const $SlideActive = this.slider.querySelector(
        ".slider__item.active"
      ) as HTMLElement;

      const { ultimoHermano } = obtenerHermanos($SlideActive, direction, steps);
      if (!ultimoHermano) return;

      const { distance } = this.getSlidePostion(ultimoHermano);
      this.setSlideMoveScroll(distance);
    };

    private setActiveDot = (index: string) => {
      if (this.$arrayDots.length === 0) return;

      this.$arrayDots.forEach((dot) => dot.classList.remove("active"));

      const $indexDot = parseInt(index, 10);
      if ($indexDot >= 0 && $indexDot < this.$arrayDots.length) {
        this.$arrayDots[$indexDot].classList.add("active");
      }
    };

    private getSlidePostion = (item: HTMLElement) => {
      return {
        dataPosition: item.getAttribute("data-positionValue"),
        dataSlide: item.getAttribute("data-slide"),
        distance: item.offsetLeft,
      };
    };

    private setSlideMoveScroll = (value: number) => {
      this.$sliderList.scrollLeft = value;
    };

    #getSlideWithDot(dataSlide: string) {
      if (dataSlide) {
        const sliderActive = this.$arraySLiderItems.find(
          (itemSlider) => itemSlider.getAttribute("data-slide") === dataSlide
        );

        if (sliderActive) {
          return {
            element: sliderActive,
            distance: sliderActive.offsetLeft,
          };
        }
      }

      // Si no se encuentra el elemento o si `dataSlide` no está definido, retorna `null`
      return null;
    }
  }

  new SliderScroll(".slider");
</script>
